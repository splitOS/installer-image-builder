#!/usr/bin/env perl

# Enable strict interpretation, enable libraries, and define metadata
use warnings;
use strict;

use File::Path qw(remove_tree);
use File::Copy qw(copy);

my $version = "v0.1.0";
my $downloaderProgram;

# Define paths
my $workDirectory = "/tmp/splitos-iib";
my $cacheDirectory = "/var/cache/splitos-iib";
my $isoRoot = "$workDirectory/iso";
my $initramfsRoot = "$workDirectory/initramfs";

# Helper subroutines
# Print a progress message
sub proglog {
    my ($message) = @_;
    print ":: $message\n";
}

# Print a follow-up to a proglog
sub sublog {
    my ($message) = @_;
    print "  => $message\n";
}

# Die with style
sub mdie {
    my ($message) = @_;
    die "[X] $message\n";
}

# Run a command with stdout and stderr supressed and mdie on failure
sub run {
    my ($command, $failureMdieMessage) = @_;
    system($command . " > /dev/null 2>&1") == 0 or mdie $failureMdieMessage;
}

# Shallow-clone a Git repository to the cache directory
sub clone {
    my ($url, $intoDirectory, $failedToCloneName) = @_;
    run "git clone $url $cacheDirectory/$intoDirectory --depth 1", "Failed to clone code for $failedToCloneName.";
}

# Program logic subroutines
# Check if kernel exists and is valid
sub kernelck {
    my $kernel;

    proglog "Attempting to find a kernel image in the current directory...";

    # Check if kernel exists
    if (-e "./bzImage") {
        $kernel = "./bzImage";
    } elsif (-e "./zImage") {
        $kernel = "./zImage";
    } else {
        mdie "Could not find a kernel image in the current directory.";
    }
    proglog "Kernel image found!";

    proglog "Checking kernel validity...";

    # Open the kernel image for an integrity check
    open my $kernelHandle, '<', $kernel or mdie "Could not open kernel image for integrity check.";

    # Read the magic number of the kernel and close the file handle
    my $magicNumber;
    seek $kernelHandle, 514, 0 or mdie "Could not seek to magic number.";
    read $kernelHandle, $magicNumber, 4 or mdie "Could not read magic number.";
    close $kernelHandle;

    # Check if the magic number is correct
    if ($magicNumber eq "HdrS") {
        sublog "Kernel validity check passed!";
    } else {
        mdie "Kernel validity check failed.";
    }
}

# Purge old work directory if existing and create a new one
sub workdir {
    proglog "Creating a work directory...";

    if (-d $workDirectory) {
        remove_tree($workDirectory) or mdie "Could not remove old work directory.";
    } elsif (-f $workDirectory) {
        unlink $workDirectory or mdie "Could not remove conflicting file for creating work directory."
    } else {
        mkdir $workDirectory, 0755 or mdie "Could not create work directory in /tmp.";
        mkdir $isoRoot, 0755 or mdie "Could not create ISO root in work directory.";
    }
}

# Create a cache directory if not existing already
sub cachedir {
    if (-f $cacheDirectory) {
        unlink $cacheDirectory or mdie "Could not remove conflicting file to create cache directory.";
    }

    if (-d $cacheDirectory) {
        proglog "Existing cache detected!";
        return;
    }

    proglog "Creating a cache directory...";
    mkdir $cacheDirectory, 0755 or mdie "Could not create cache directory.";
}

# Download components' source code
sub synccomp {
    proglog "Downloading components' source code...";

    # Clone GNU coreutils
    clone("git://git.sv.gnu.org/coreutils.git", "coreutils", "GNU coreutils") unless -d "$cacheDirectory/coreutils";

    # Clone Limine
    clone("https://github.com/limine-bootloader/limine.git", "limine", "the Limine bootloader")
        unless -d "$cacheDirectory/limine";
}

# Check if dependencies exist
# Note: these system() calls are left here instead of run() calls because we want to die with a different message
if (!system("command -v git > /dev/null 2>&1") == 0) {
    mdie "Could not find Git."
}

# Splash text
print "--== splitOS installer image builder $version ==--\n";

# Execute program logic subroutines
kernelck;

workdir;
cachedir;

synccomp;