#!/usr/bin/env perl

# Enable strict interpretation, enable libraries, and define metadata
use warnings;
use strict;
use File::Path qw(remove_tree);
use File::Copy qw(copy);
my $version = "v0.1.0";
my $downloaderProgram;

# Define paths
my $workDirectory = "/tmp/splitos-iib";
my $cacheDirectory = "/var/cache/splitos-iib";
my $isoRoot = "$workDirectory/iso";
my $initramfsRoot = "$workDirectory/initramfs";

# Check if dependencies exist
if (system("command -v curl > /dev/null 2>&1") == 0) {
    $downloaderProgram = "curl";
} elsif (system("command -v wget > /dev/null 2>&1") == 0) {
    $downloaderProgram = "wget";
} else {
    die "Could not find cURL nor wget. Failed";
}

if (!system("command -v git > /dev/null 2>&1") == 0) {
    die "Could not find Git. Failed"
}

# Check if kernel exists and is valid
sub kernelck {
    my $kernel;

    print "Attempting to find a local kernel image.\n";

    # Check if kernel exists
    if (-e "./bzImage") {
        $kernel = "./bzImage";
    } elsif (-e "./zImage") {
        $kernel = "./zImage";
    } else {
        die "Could not find a kernel image in the current directory. Failed";
    }
    print "Kernel image found!\n";

    print "Checking kernel validity...\n";

    # Open the kernel image for an integrity check
    open my $kernelHandle, '<', $kernel or die "Could not open kernel image for integrity check. Failed";

    # Read the magic number of the kernel and close the file handle
    my $magicNumber;
    seek $kernelHandle, 514, 0 or die "Could not seek to magic number. Failed";
    read $kernelHandle, $magicNumber, 4 or die "Could not read magic number. Failed";
    close $kernelHandle;

    # Check if the magic number is correct
    if ($magicNumber eq "HdrS") {
        print "Kernel validity check passed!\n";
    } else {
        die "Kernel validity check failed. Failed";
    }
}

# Purge old work directory if existing and create a new one
sub workdir {
    print "Creating a work directory...\n";

    if (-d $workDirectory) {
        remove_tree($workDirectory) or die "Could not remove old work directory. Failed";
    } elsif (-f $workDirectory) {
        unlink $workDirectory or die "Could not remove conflicting file for creating work directory. Failed"
    } else {
        mkdir $workDirectory, 0755 or die "Could not create work directory in /tmp. Failed";
        mkdir $isoRoot, 0755 or die "Could not create ISO root in work directory. Failed";
    }
}

# Create a cache directory if not existing already
sub cachedir {
    print "Creating a cache directory...\n";

    if (-f $cacheDirectory) {
        unlink $cacheDirectory or die "Could not remove conflicting file to create cache directory. Failed";
    } if (! -d $cacheDirectory) {
        mkdir $cacheDirectory, 0755 or die "Could not create cache directory. Failed";
    }
}

print "splitOS installer image builder " . $version . "\n";

kernelck;

workdir;
cachedir;